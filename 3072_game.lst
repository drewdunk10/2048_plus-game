Microsoft (R) Macro Assembler Version 14.28.29336.0	    04/11/21 20:33:41
main.asm						     Page 1 - 1


				INCLUDE Irvine32.Inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE UserPrompt.inc  ; also needs header file to recognize UserPrompt call
			      C ExitProcess PROTO, dwExitCode:DWORD
			      C 
			      C UserPrompt PROTO    ; Allows for more control over stack parameters
			      C EXTERNDEF dir:BYTE  ; external definition (dir defined in main module)
			      C 
			      C OPTION PROC:PRIVATE ; Make it so only project files can use this module
			      C 
			      C 
				INCLUDE UpdateGrid.inc
			      C ExitProcess PROTO, dwExitCode:DWORD
			      C 
			      C UpdateGrid PROTO    ; Allows for more control over stack parameters
			      C EXTERNDEF grid_array:DWORD, tile_count:DWORD, dh_pos:BYTE , dl_pos:BYTE, tile_choice:BYTE
			      C 
			      C OPTION PROC:PRIVATE ; Make it so only project files can use this module
			      C 
				INCLUDE GridMove.inc    ; sliding tiles
			      C ExitProcess PROTO, dwExitCode:DWORD
			      C 
			      C MapToDisplay PROTO
			      C 
			      C GridMove PROTO
			      C EXTERNDEF grid_array:DWORD, dh_pos:BYTE, dl_pos:BYTE, dir:BYTE, tile_count:DWORD, current_score:DWORD, current_max:DWORD, moveFlag:BYTE, multiple:BYTE
			      C 
			      C OPTION PROC:PRIVATE
			      C 

 00000000			.data
				; Use these rows to construct the grid.
 00000000  00000015 [		divider BYTE 21 DUP("-"), 0
	    2D
	   ] 00
 00000016 7C 20 20 20 20	block_row BYTE "|    |    |    |    |", 0
	   7C 20 20 20 20
	   7C 20 20 20 20
	   7C 20 20 20 20
	   7C 00

				; Array to hold values in game grid
 0000002C  00000010 [		grid_array DWORD 16 DUP(0), 0
	    00000000
	   ] 00000000

				; Number positions for display grid:
 00000070 06 08 0A 0C 00	dh_pos BYTE 6, 8, 10, 12, 0
 00000075 01 06 0B 10 00	dl_pos BYTE 1, 6, 11, 16, 0

				; Values used for scoreboard
 0000007A 00			dir BYTE ?               ; Set in UserPrompt
 0000007B 00000C00		target_tile DWORD 3072
 0000007F 00000000		current_max DWORD 0
 00000083 00000000		current_score DWORD 0
 00000087 00000000		tile_count DWORD 0

				; Text for scoreboard
 0000008B 43 75 72 72 65	score1 BYTE "Current Score: ", 0
	   6E 74 20 53 63
	   6F 72 65 3A 20
	   00
 0000009B 54 61 72 67 65	score2 BYTE "Target Tile: ", 0
	   74 20 54 69 6C
	   65 3A 20 00
 000000A9 54 69 6C 65 20	score3 BYTE "Tile Count: ", 0
	   43 6F 75 6E 74
	   3A 20 00
 000000B6 4C 61 73 74 20	score4 BYTE "Last Move: ", 0
	   4D 6F 76 65 3A
	   20 00

 000000C2 43 68 6F 6F 73	startMsg BYTE "Choose a multiple for the game (1-9): ", 0
	   65 20 61 20 6D
	   75 6C 74 69 70
	   6C 65 20 66 6F
	   72 20 74 68 65
	   20 67 61 6D 65
	   20 28 31 2D 39
	   29 3A 20 00
 000000E9 50 6C 65 61 73	errMsg BYTE "Please enter a number 1-9: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   6E 75 6D 62 65
	   72 20 31 2D 39
	   3A 20 00
 00000105 4E 6F 20 6D 6F	loseMsg BYTE "No moves left. Game over. Your biggest tile: ", 0
	   76 65 73 20 6C
	   65 66 74 2E 20
	   47 61 6D 65 20
	   6F 76 65 72 2E
	   20 59 6F 75 72
	   20 62 69 67 67
	   65 73 74 20 74
	   69 6C 65 3A 20
	   00
 00000133 20 74 69 6C 65	winMsg  BYTE " tile reached. You win!", 0
	   20 72 65 61 63
	   68 65 64 2E 20
	   59 6F 75 20 77
	   69 6E 21 00

 0000014B 01			multiple BYTE 1
 0000014C 00 00			tile_choice BYTE 0, 0  ; "random" tiles generated after each move

				; Flag to test for a valid move
 0000014E 00			moveFlag BYTE 0

 00000000			.code
				;-----------------------------------------------------
 00000000			PrintGrid PROC
				;
				; Prints the empty game board in the console.
				; Receives: divider and block_row BYTE arrays
				; Returns: nothing
				;-----------------------------------------------------
				     ;Gotoxy start position for board
 00000000  B6 05		     mov dh, 5
 00000002  B2 00		     mov dl, 0
 00000004  B9 00000009		     mov ecx, 9
 00000009  B3 02		     mov bl, 2

 0000000B			     build_row:
				          ; Move to next row.
 0000000B  E8 00000000 E	          call Gotoxy
 00000010  FE C6		          inc dh   ; move start row for next loop
 00000012  52			          push edx ; save value since WriteString also uses edx

				          ; mov counter value for modulus.
 00000013  66| 8B C1		          mov ax, cx
 00000016  F6 F3		          div bl

				          ; Check remainder for even or odd row.
				          .IF(ah == 1)
 00000018  80 FC 01	   *	    cmp    ah, 001h
 0000001B  75 07	   *	    jne    @C0001
 0000001D  BA 00000000 R	               mov edx, OFFSET divider
				          .ELSE
 00000022  EB 05	   *	    jmp    @C0003
 00000024		   *@C0001:
 00000024  BA 00000016 R	               mov edx, OFFSET block_row
				          .ENDIF
 00000029		   *@C0003:
				          
				          ; Write the row to the console.
 00000029  E8 00000000 E	          call WriteString
 0000002E  5A			          pop edx  ; restore next row position.

				          ; Loop to next row.
 0000002F  E2 DA		          loop build_row
 00000031  C3			          ret

 00000032			PrintGrid ENDP


				;-----------------------------------------------------
 00000032			UpdateScoreBoard PROC
				;
				; Re-displays each of the game variables on the console.
				; Receives: values of current_score, target_score, 
				; tile_count, and dir.
				; Returns: nothing
				;-----------------------------------------------------
 00000032  B6 10		     mov dh, 16
 00000034  B2 00		     mov dl, 0
 00000036  E8 00000000 E	     call Gotoxy

				     ; Make sure to use standard color settings.
 0000003B  B8 0000000F		     mov eax, white + (black*16)
 00000040  E8 00000000 E	     call SetTextColor

 00000045  A1 00000083 R	     mov eax, current_score
 0000004A  BA 0000008B R	     mov edx, OFFSET score1
 0000004F  E8 00000000 E	     call WriteString
 00000054  E8 00000000 E	     call WriteDec
 00000059  E8 00000000 E	     call Crlf

 0000005E  A1 0000007B R	     mov eax, target_tile
 00000063  BA 0000009B R	     mov edx, OFFSET score2
 00000068  E8 00000000 E	     call WriteString
 0000006D  E8 00000000 E	     call WriteDec
 00000072  E8 00000000 E	     call Crlf

 00000077  A1 00000087 R	     mov eax, tile_count
 0000007C  BA 000000A9 R	     mov edx, OFFSET score3
 00000081  E8 00000000 E	     call WriteString
 00000086  E8 00000000 E	     call WriteDec
 0000008B  E8 00000000 E	     call Crlf

 00000090  0F B6 05		     movzx eax, dir
	   0000007A R
 00000097  BA 000000B6 R	     mov edx, OFFSET score4
 0000009C  E8 00000000 E	     call WriteString
 000000A1  E8 00000000 E	     call WriteChar
 000000A6  E8 00000000 E	     call Crlf

 000000AB  C3			     ret 
 000000AC			UpdateScoreBoard ENDP

				;-----------------------------------------------------
 000000AC			CheckMoves PROC USES ecx ebx
				;
				; Checks a filled grid of tiles for any possible moves
				; remaining.
				; Returns: 0 if no moves remaining and 1 otherwise by
				; storing it in EAX
				;-----------------------------------------------------
				LOCAL row_first:DWORD
 000000AC  55		   *	    push   ebp
 000000AD  8B EC	   *	    mov    ebp, esp
 000000AF  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000000B2  51		   *	    push   ecx
 000000B3  53		   *	    push   ebx
 000000B4  BE 0000002C R	    mov esi, OFFSET grid_array      ; Pointer to game board grid array.
 000000B9  B9 00000000		    mov ecx, 0                      ; Current index.
 000000BE  C7 45 FC		    mov row_first, 0                ; Stores first index in row.
	   00000000
				    .WHILE (ecx <= 60)  ; 15 * 4 = 60 (last index in grid_array).
 000000C5  EB 4A	   *	    jmp    @C0004
 000000C7		   *@C0005:
				        ; Get index of row first.
 000000C7  66| 8B C1		        mov ax, cx
 000000CA  B3 10		        mov bl, 16            ; Mod by 16 to check if first element in row.
 000000CC  F6 F3		        div bl                ; If it is the first element don't check left.

				         ; Remainder is stored in ah.
				        .IF ah == 0
 000000CE  0A E4	   *	    or	ah, ah
 000000D0  75 03	   *	    jne    @C0006
 000000D2  89 4D FC		            mov row_first, ecx
				        .ENDIF
				        
				        ; Move value at current index to ebx.
 000000D5		   *@C0006:
 000000D5  8B 1C 0E		        mov ebx, [esi + ecx]

				        ; If first row, don't check up.
 000000D8  83 F9 0C		        cmp ecx, 12
 000000DB  7E 06		        jle skip_up
				        ; Check slide up possibility.
 000000DD  3B 5C 0E F0		        cmp ebx, [esi + ecx - 16]
 000000E1  74 3C		        je possible
 000000E3			    skip_up:
				        ; If last row, don't check down.
 000000E3  8B C1		        mov eax, ecx
 000000E5  83 C0 10		        add eax, 16
 000000E8  83 F8 3C		        cmp eax, 60
 000000EB  77 06		        ja skip_down
				        ; Check slide down possibility.
 000000ED  3B 5C 0E 10		        cmp ebx, [esi + ecx + 16]
 000000F1  74 2C		        je possible
 000000F3			    skip_down:
				        ; If first column, don't check left.
 000000F3  3B 4D FC		        cmp ecx, row_first
 000000F6  74 06		        je skip_left
				        ; Check slide left possibility.
 000000F8  3B 5C 0E FC		        cmp ebx, [esi + ecx - 4]
 000000FC  74 21		        je possible
 000000FE			    skip_left:
				        ; If last column, don't check right.
 000000FE  8B 45 FC		        mov eax, row_first
 00000101  83 C0 0C		        add eax, 12
 00000104  3B C8		        cmp ecx, eax
 00000106  74 06		        je skip_right
				        ; Check slide right possibility.
 00000108  3B 5C 0E 04		        cmp ebx, [esi + ecx + 4]
 0000010C  74 11		        je possible
 0000010E			    skip_right:
				        ; Move to next index in grid_array.
 0000010E  83 C1 04		        add ecx, 4
				    .ENDW
 00000111		   *@C0004:
 00000111  83 F9 3C	   *	    cmp    ecx, 03Ch
 00000114  76 B1	   *	    jbe    @C0005
				    ; Return 0 in eax.
 00000116  B8 00000000		    mov eax, 0
				    ret
 0000011B  5B		   *	    pop    ebx
 0000011C  59		   *	    pop    ecx
 0000011D  C9		   *	    leave  
 0000011E  C3		   *	    ret    00000h
 0000011F			  possible:
				    ; Return 1 in eax.
 0000011F  B8 00000001		    mov eax, 1
				    ret
 00000124  5B		   *	    pop    ebx
 00000125  59		   *	    pop    ecx
 00000126  C9		   *	    leave  
 00000127  C3		   *	    ret    00000h
 00000128			CheckMoves ENDP



 00000128			main PROC PUBLIC
 00000128  E8 00000000 E	    call Randomize                 ; Set seed.

				    ; Ask user to select a starting multiple
 0000012D  B8 00000000		    mov eax, 0
 00000132  BA 000000C2 R	    mov edx, OFFSET startMsg
 00000137  E8 00000000 E	    call WriteString
 0000013C			    read:  
 0000013C  E8 00000000 E	       call ReadDec
 00000141  83 F8 09		       cmp eax, 9
 00000144  7E 0C		       jle valid

 00000146  BA 000000E9 R	       mov  edx, OFFSET errMsg
 0000014B  E8 00000000 E	       call WriteString
 00000150  EB EA		       jmp  read

 00000152			    valid:
 00000152  A2 0000014B R	       mov  multiple, al
 00000157  E8 00000000 E	       call ClrScr

				    ; Calculate tile to win
 0000015C  66| BB 0400		    mov bx, 1024
 00000160  66| F7 E3		    mul bx
 00000163  A3 0000007B R	    mov target_tile, eax

				    ; Initialize tile choices
 00000168  A0 0000014B R	    mov al, multiple
 0000016D  A2 0000014C R	    mov tile_choice[0], al
 00000172  02 C0		    add al, al
 00000174  A2 0000014D R	    mov tile_choice[1], al

 00000179  E8 FFFFFE82		    call PrintGrid                 ; Display empty board.

				    ; Initialize grid with two tiles.
 0000017E  E8 00000000 E	    call UpdateGrid
 00000183  E8 00000000 E	    call UpdateGrid
 00000188  E8 FFFFFEA5		    call UpdateScoreBoard

				    ; Main game loop
 0000018D  A1 0000007B R	    mov eax, target_tile
				    .WHILE (current_max < eax)
 00000192  EB 3C	   *	    jmp    @C0009
 00000194		   *@C000A:
 00000194			       prompt:
 00000194  E8 00000000 E	          call UserPrompt          ; Prompts user for a direction to move.
 00000199  E8 00000000 E	          call GridMove            ; Executes move and shifts tiles.

 0000019E  80 3D 0000014E R	          cmp moveFlag, 0          ; Check if no slides happened
	   00
 000001A5  74 ED		          je prompt                ; If no tiles slid, ask user for input again
 000001A7  C6 05 0000014E R	          mov moveFlag, 0          ; Reset move flag
	   00

 000001AE  E8 00000000 E	          call UpdateGrid          ; Adds a random tile after a user move.
 000001B3  E8 FFFFFE7A		          call UpdateScoreBoard    ; Updates/Renders game variables on display.

				          ; Check if there are any avaliable moves left
				          .IF (tile_count >= 16)
 000001B8  83 3D 00000087 R
	   10		   *	    cmp    tile_count, 010h
 000001BF  72 0A	   *	    jb	@C000B
 000001C1			             check:
 000001C1  E8 FFFFFEE6		                call CheckMoves
 000001C6  83 F8 00		                cmp eax, 0
 000001C9  74 38		                je lose            ; If no moves left, end game
				          .ENDIF

 000001CB		   *@C000B:
 000001CB  A1 0000007B R	          mov eax, target_tile     ; Restore target_tile for loop condition
				    .ENDW
 000001D0		   *@C0009:
 000001D0  39 05 0000007F R *	    cmp    current_max, eax
 000001D6  72 BC	   *	    jb	@C000A

 000001D8			     win:
 000001D8  B8 00000002		          mov eax, green + (black*16)
 000001DD  E8 00000000 E	          call SetTextColor

				          ; Move cursor above grid for win message.
 000001E2  66| BA 0000		          mov dx, 0
 000001E6  B6 04		          mov dh, 4
 000001E8  E8 00000000 E	          call Gotoxy
 000001ED  A1 0000007B R	          mov eax, target_tile
 000001F2  E8 00000000 E	          call WriteDec
 000001F7  BA 00000133 R	          mov edx, OFFSET winMsg
 000001FC  E8 00000000 E	          call WriteString
 00000201  EB 29		          jmp _exit
 00000203			    lose:
 00000203  B8 00000004		          mov eax, red + (black*16)
 00000208  E8 00000000 E	          call SetTextColor

				          ; Move cursor above grid for lose message.
 0000020D  66| BA 0000		          mov dx, 0
 00000211  B6 04		          mov dh, 4
 00000213  E8 00000000 E	          call Gotoxy
 00000218  BA 00000105 R	          mov edx, OFFSET loseMsg
 0000021D  E8 00000000 E	          call WriteString
 00000222  A1 0000007F R	          mov eax, current_max
 00000227  E8 00000000 E	          call WriteDec

				     ; Move cursor below grid before exit.
 0000022C			     _exit:
 0000022C  E8 FFFFFE01		          call UpdateScoreBoard    ; Final update before exit.
 00000231  66| BA 0000		          mov dx, 0
 00000235  B6 14		          mov dh, 20
 00000237  E8 00000000 E	          call Gotoxy

				          invoke ExitProcess,0
 0000023C  6A 00	   *	    push   +000000000h
 0000023E  E8 00000000 E   *	    call   ExitProcess
 00000243			main ENDP
				end main
Microsoft (R) Macro Assembler Version 14.28.29336.0	    04/11/21 20:33:41
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000014F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000243 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CheckMoves . . . . . . . . . . .	P Near	 000000AC _TEXT	Length= 0000007C Private STDCALL
  row_first  . . . . . . . . . .	DWord	 bp - 00000004
  skip_up  . . . . . . . . . . .	L Near	 000000E3 _TEXT	
  skip_down  . . . . . . . . . .	L Near	 000000F3 _TEXT	
  skip_left  . . . . . . . . . .	L Near	 000000FE _TEXT	
  skip_right . . . . . . . . . .	L Near	 0000010E _TEXT	
  possible . . . . . . . . . . .	L Near	 0000011F _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GridMove . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MapToDisplay . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintGrid  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000032 Private STDCALL
  build_row  . . . . . . . . . .	L Near	 0000000B _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateGrid . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateScoreBoard . . . . . . . .	P Near	 00000032 _TEXT	Length= 0000007A Private STDCALL
UserPrompt . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000128 _TEXT	Length= 0000011B Public STDCALL
  read . . . . . . . . . . . . .	L Near	 0000013C _TEXT	
  valid  . . . . . . . . . . . .	L Near	 00000152 _TEXT	
  prompt . . . . . . . . . . . .	L Near	 00000194 _TEXT	
  check  . . . . . . . . . . . .	L Near	 000001C1 _TEXT	
  win  . . . . . . . . . . . . .	L Near	 000001D8 _TEXT	
  lose . . . . . . . . . . . . .	L Near	 00000203 _TEXT	
  _exit  . . . . . . . . . . . .	L Near	 0000022C _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
block_row  . . . . . . . . . . .	Byte	 00000016 _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
current_max  . . . . . . . . . .	DWord	 0000007F _DATA	Public STDCALL
current_score  . . . . . . . . .	DWord	 00000083 _DATA	Public STDCALL
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dh_pos . . . . . . . . . . . . .	Byte	 00000070 _DATA	Public STDCALL
dir  . . . . . . . . . . . . . .	Byte	 0000007A _DATA	Public STDCALL
divider  . . . . . . . . . . . .	Byte	 00000000 _DATA	
dl_pos . . . . . . . . . . . . .	Byte	 00000075 _DATA	Public STDCALL
errMsg . . . . . . . . . . . . .	Byte	 000000E9 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
grid_array . . . . . . . . . . .	DWord	 0000002C _DATA	Public STDCALL
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
loseMsg  . . . . . . . . . . . .	Byte	 00000105 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
moveFlag . . . . . . . . . . . .	Byte	 0000014E _DATA	Public STDCALL
multiple . . . . . . . . . . . .	Byte	 0000014B _DATA	Public STDCALL
red  . . . . . . . . . . . . . .	Number	 00000004h   
score1 . . . . . . . . . . . . .	Byte	 0000008B _DATA	
score2 . . . . . . . . . . . . .	Byte	 0000009B _DATA	
score3 . . . . . . . . . . . . .	Byte	 000000A9 _DATA	
score4 . . . . . . . . . . . . .	Byte	 000000B6 _DATA	
startMsg . . . . . . . . . . . .	Byte	 000000C2 _DATA	
target_tile  . . . . . . . . . .	DWord	 0000007B _DATA	
tile_choice  . . . . . . . . . .	Byte	 0000014C _DATA	Public STDCALL
tile_count . . . . . . . . . . .	DWord	 00000087 _DATA	Public STDCALL
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winMsg . . . . . . . . . . . . .	Byte	 00000133 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
